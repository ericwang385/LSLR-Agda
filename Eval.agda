module Eval where

open import Type
open import Term

open import Agda.Builtin.Unit using (Ріц)
open import Agda.Builtin.Nat using (Nat)
open import Agda.Builtin.Bool using () renaming (Bool to ­Юћ╣)

data Val : ╬Њ Ріб A Рєњ Set where
    ` : Рѕђ {x : ╬Њ РѕІ A} Рєњ Val (` x)
    РЪеРЪЕ : Рѕђ {x : ╬Њ Ріб Unit} Рєњ Val x
    ┬▒ : (x : ╬Њ Ріб Int) Рєњ Val x
    bool : (x : ╬Њ Ріб Bool) Рєњ Val x
    pair : Val eРѓЂ Рєњ Val eРѓѓ Рєњ Val (РЪе eРѓЂ , eРѓѓ РЪЕ)
    lam : Val (кЏ e)
    tlam : Val (╬Џ e)
    pack : (╬▒ : ­Юњд РібрхЈ J) Рєњ (x : ╬Њ Ріб (A [ ╬▒ ]рхЈ)) Рєњ (t : ╬Њ ,рхЈ J Ріб A) Рєњ Val x Рєњ Val (pack ╬▒ , x as t)
    roll : Рѕђ A Рєњ (x : ╬Њ Ріб A [ ╬╝ A ]рхЈ) Рєњ Val x Рєњ Val (roll A x)

infix 5 _РЪХ_
data _РЪХ_ : ╬Њ Ріб A Рєњ ╬Њ Ріб A Рєњ Set where
    if-true : if true then eРѓЂ else eРѓѓ РЪХ eРѓЂ  
    if-false : if false then eРѓЂ else eРѓѓ РЪХ eРѓѓ
    pair-fst : Val eРѓЂ Рєњ Val eРѓѓ Рєњ fst РЪе eРѓЂ , eРѓѓ РЪЕ РЪХ eРѓЂ
    pair-snd : Val eРѓЂ Рєњ Val eРѓѓ Рєњ fst РЪе eРѓЂ , eРѓѓ РЪЕ РЪХ eРѓѓ
    lam : {eРѓЂ : ╬Њ , A Ріб B} {eРѓѓ : ╬Њ Ріб A} Рєњ Val eРѓѓ Рєњ (кЏ eРѓЂ) ┬и eРѓѓ РЪХ (eРѓЂ [ eРѓѓ ])
    lamt : {e : ╬Њ ,рхЈ J Ріб B} {A : ­Юњд РібрхЈ J} Рєњ ╬Џ e ┬ирхЈ A РЪХ e рхЈ[ A ]
    unpack : {╬▒ : ­Юњд РібрхЈ J} {eРѓЂ : ╬Њ Ріб (A [ ╬▒ ]рхЈ)} {R : ╬Њ ,рхЈ J Ріб A} Рєњ Val eРѓЂ Рєњ unpack_as_,_of_ (pack ╬▒ , eРѓЂ as R) ╬▒ R РЪХ eРѓЂ
    unroll : {e : ╬Њ Ріб A [ ╬╝ A ]рхЈ} Рєњ Val e Рєњ unroll (roll A e) РЪХ e  